{"version":3,"sources":["config/trigger.js","assets/images sync nonrecursive //.(png|jpe?g|svg)$","assets/images/blue_payout_correct_10.png","assets/images/blue_payout_correct_100.png","trials/countdown.js","config/main.js","lib/utils.js","lib/markup/photodiode.js","lib/markup/stimuli.js","trials/experimentStart.js","trials/startCode.js","trials/userId.js","lib/markup/eventMarkerMessage.js","trials/holdUpMarker.js","timelines/preamble.js","trials/experimentEnd.js","trials/fixation.js","lib/markup/fixation.js","trials/showCondition.js","lib/markup/earnings.js","trials/taskEnd.js","timelines/taskTrial.js","timelines/taskBlock.js","lib/taskUtils.js","config/practice.js","config/tutorial.js","config/experiment.js","timelines/main.js","App.js","index.js"],"names":["module","exports","eventCodes","fixation","evidence","show_earnings","test_connect","open_task","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","buildCountdown","text","time","timeline","_","val","prompt","type","stimulus","trial_duration","response_ends_trial","AT_HOME","process","REACT_APP_AT_HOME","lang","require","mlang","merge","r","defaultBlockSettings","conditions","repeats_per_condition","is_practice","is_tutorial","photodiode_active","ipcRenderer","photodiodeGhostBox","pdSpotEncode","taskCode","numBlinks","repeat_pulse_for","ms","i","callback","$","css","setTimeout","pulse_for","send","baseStimulus","element","class_","experimentStart","task","name","choices","continue","button","startCode","setting_up","on_load","sleep","Promise","jitter50","base","offset","Math","floor","random","jitter","deepCopy","obj","JSON","parse","stringify","getTurkUniqueId","turkInfo","jsPsych","turk","workerId","assignmentId","userId","userid","set","on_finish","data","uniqueId","console","log","eventMarkerMessage","a","async","eventMarker","not_found","holdUpMarker","focus","then","s","document","getElementById","innerHTML","preamble","experimentEnd","duration","end","NO_KEYS","showCondition","condition","timeBeforeUpdate","on_start","trial","earningsDisplay","earnings","parseFloat","toFixed","beadEnd","trialDetails","taskTrial","blockSettings","blockDetails","trial_earnings","start_time","Date","now","taskEnd","taskBlock","startingOpts","startingOptions","c","range","shuffle","flatten","generateStartingOpts","block_earnings","optimal_earnings","continue_block","blockStart","block_settings","unshift","practiceBlock","tutorialBlock","exptBlock1","exptBlock2","countdown","message1","message2","tl","psiturk","window","lodash","noConflict","PsiTurk","App","outsideTurk","className","settings","on_data_update","recordTrialData","saveData","taskdata","fetch","method","body","res","teardownTask","location","adServerLoc","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.9ec6ac72.chunk.js","sourcesContent":["// NOTE - these event codes must match what is in public/config/trigger.js\nconst eventCodes = {\n\tfixation: 1,\n\tevidence: 5,\n\tshow_earnings: 7,\n\ttest_connect: 32,\n\topen_task: 18\n}\n\n// this is module.exports isntead of just exports as it is also imported into the electron app\nmodule.exports = {\n\teventCodes\n}\n","var map = {\n\t\"./blue_payout_correct_10.png\": 25,\n\t\"./blue_payout_correct_100.png\": 26\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 24;","module.exports = __webpack_public_path__ + \"static/media/blue_payout_correct_10.f515a81e.png\";","module.exports = __webpack_public_path__ + \"static/media/blue_payout_correct_100.ae2416c7.png\";","import * as _ from 'lodash'\n\n// build a countdown transition with the given text and number of seconds\nconst buildCountdown = (text, time) => {\n  const times = _.range(time, 0 , -1)\n  const timeline = times.map( (val) => {return({ prompt: `<h1>${val}</h1>` })})\n\n  return ({\n    type: 'html_keyboard_response',\n    stimulus: `<h3>${text}</h3`,\n    trial_duration: 1000,\n    response_ends_trial: false,\n    timeline:  timeline\n  })\n}\n\nexport default buildCountdown\n","// config/main.js\n// This is the main configuration file where universal and default settings should be placed.\n// These settins can then be imported anywhere in the app as they are exported at the botom of the file.\n\nimport { jsPsych } from 'jspsych-react'\nimport _ from 'lodash'\nimport { eventCodes } from './trigger'\n\n// mapping of letters to key codes\nconst keys = {\n\t\"A\": 65,\n\t\"B\": 66,\n\t\"C\": 67,\n\t\"F\": 70,\n\t\"J\": 74,\n\t\"space\": 32\n}\n\n// is this mechanical turk?\nconst MTURK=true\nconst AT_HOME = (process.env.REACT_APP_AT_HOME === 'true')\nconst EXPFACTORY=true\n\n// get language file\nconst lang = require('../language/en_us.json')\nif (MTURK) { // if this is mturk, merge in the mturk specific language\n  const mlang = require('../language/en_us.mturk.json')\n\t_.merge(lang, mlang)\n}\n\nconst defaultBlockSettings = {\n\tconditions: [\"a\", \"b\", \"c\"],\n\trepeats_per_condition: 1, // number of times every condition is repeated\n\tis_practice: false,\n\tis_tutorial: false,\n\tphotodiode_active: false\n}\n\nexport {\n\tkeys,\n\tdefaultBlockSettings,\n\tlang,\n\teventCodes,\n        EXPFACTORY,\n\tMTURK,\n\tAT_HOME\n}\n","import { jsPsych } from 'jspsych-react'\nimport requireContext from 'require-context.macro'\n\nconst sleep = (ms) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// add a random number between 0 and offset to the base number\nconst jitter = (base, offset) => (\n  base + Math.floor(Math.random() * Math.floor(offset))\n)\n\n// add a random number between 0 and 50 to the base number\nconst jitter50 = (base) => jitter(base, 50)\n\n// flip a coin\nconst randomTrue = () => Math.random() > 0.5\n\n// deeply copy an object\nconst deepCopy = (obj) => JSON.parse(JSON.stringify(obj))\n\n// format a number as a dollar amount\nconst formatDollars = (amount) => '$' + parseFloat(amount).toFixed(2)\n\n\n// create a pre-trial wait period\nconst generateWaitSet = (trial, waitTime) => {\n  let waitTrial = Object.assign({}, trial)\n  waitTrial.trial_duration = waitTime\n  waitTrial.response_ends_trial = false\n  waitTrial.prompt = '-'\n\n  return [waitTrial, trial]\n}\n\nconst keypressResponse = (info) => {\n  const data = {\n    key_press: info.key\n  }\n\n  jsPsych.finishTrial(data)\n}\n\nconst startKeypressListener = () => {\n  let keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n    callback_function: keypressResponse,\n    valid_responses: jsPsych.ALL_KEYS,\n    persist: false\n  })\n\n  return keyboardListener\n}\n\n// import images\nconst importAll = (r) => {\n  return r.keys().map(r);\n}\n\nconst images = importAll(requireContext('../assets/images', false, /\\.(png|jpe?g|svg)$/));\n\nconst getTurkUniqueId = () => {\n  const turkInfo = jsPsych.turk.turkInfo()\n  const uniqueId = `${turkInfo.workerId}:${turkInfo.assignmentId}`\n  return uniqueId\n}\n\nconst getUserId = (data) => {\n  const patientId = JSON.parse(data.responses)['Q0']\n  jsPsych.data.addProperties({patient_id: patientId, timestamp: Date.now()})\n  console.log(\"ID\", patientId)\n}\n\nexport {\n  sleep,\n  jitter,\n  jitter50,\n  randomTrue,\n  deepCopy,\n  formatDollars,\n  generateWaitSet,\n  images,\n  startKeypressListener,\n  getUserId,\n  getTurkUniqueId\n}\n","import { MTURK, AT_HOME } from  '../../config/main'\nimport { eventCodes } from '../../config/trigger'\nimport $ from 'jquery'\n\n// conditionally load electron and psiturk based on MTURK config variable\nconst isElectron = !MTURK\nlet ipcRenderer = false;\nif (isElectron) {\n  const electron = window.require('electron');\n  ipcRenderer  = electron.ipcRenderer;\n}\n\n// Relies on styling in App.css, generate PD spot\nconst photodiodeGhostBox = () => {\n\tconst class_ = (AT_HOME) ? 'invisible' : 'visible'\n\n  const markup = `<div class=\"photodiode-box ${class_}\" id=\"photodiode-box\">\n\t\t\t\t\t\t\t\t\t<span id=\"photodiode-spot\" class=\"photodiode-spot\"></span>\n  \t\t\t\t\t\t\t\t</div>`\n\treturn markup\n}\n\nconst pdSpotEncode = (taskCode) => {\n  function pulse_for(ms, callback) {\n      $('.photodiode-spot').css({\"background-color\": \"black\"})\n      setTimeout(() => {\n        $('.photodiode-spot').css({\"background-color\": \"white\"})\n        callback()\n      }, ms)\n    }\n\n    function repeat_pulse_for(ms, i) {\n      if (i > 0) {\n        pulse_for(ms, () => {\n          setTimeout(() => {\n            repeat_pulse_for(ms, i-1)\n          }, ms)\n        })\n      }\n    }\n\n\t\tif (!AT_HOME) {\n\t\t\t\tconst blinkTime = 40\n\t\t\t\tlet numBlinks = taskCode\n\t\t    if (taskCode < eventCodes.open_task) numBlinks = 1;\n\t\t\t\trepeat_pulse_for(blinkTime, numBlinks)\n\t\t\t\tif ( ipcRenderer ) ipcRenderer.send('trigger', taskCode)\n\t\t\t}\n\t\t}\n\nexport {\n\tphotodiodeGhostBox,\n\tpdSpotEncode\n}\n","const baseStimulus = (element, prompt=false) => {\n  const class_ = (prompt) ? 'main-prompt': 'main'\n  return `<div class=${class_}>${element}</div>`\n}\n\n\nexport {\n  baseStimulus\n}\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst experimentStart = () => {\n  let stimulus = baseStimulus(`<h1>${lang.task.name}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    choices: [lang.prompt.continue.button]\n  }\n}\n\nexport default experimentStart\n","import { eventCodes, lang } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst startCode = () => {\n  let stimulus = baseStimulus(`<h1>${lang.prompt.setting_up}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: 2000,\n    on_load: () => {\n      pdSpotEncode(eventCodes.open_task)\n    }\n  }\n}\n\nexport default startCode\n","import { lang, MTURK } from '../config/main'\nimport { getUserId, getTurkUniqueId } from '../lib/utils'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst userId = () => {\n  if (MTURK) {\n    return {\n      type: 'html_keyboard_response',\n      stimulus: baseStimulus(`<h1>${lang.userid.set}</h1>`, true),\n      response_ends_trial: false,\n      trial_duration: 800,\n      on_finish: (data) => {\n        const uniqueId = getTurkUniqueId()\n        console.log(uniqueId)\n      }\n    }\n  }\n  else {\n    return {\n      type: 'survey_text',\n      questions: [{ prompt: baseStimulus(`<h1>${lang.userid.set}</h1>`, true), value: process.env.REACT_APP_PATIENT_ID }],\n      on_finish: (data) => {\n        getUserId(data)\n      }\n    }\n  }\n}\n\nexport default userId\n","import { MTURK, lang } from '../../config/main'\n\nconst eventMarkerMessage = async () => {\n\tif (!MTURK) {\n\t\treturn `<span style=\"color: green;\">${lang.eventMarker.found}</span>`\n\t}\n\telse {\n\t\treturn `<span style=\"color: red;\">${lang.eventMarker.not_found}</span>`\n\t}\n}\n\nexport default eventMarkerMessage\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport eventMarkerMessage from '../lib/markup/eventMarkerMessage'\n\nconst holdUpMarker = () => {\n  let stimulus = baseStimulus(`<div><h2 id='usb-alert'></h2></div>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    prompt: [`<br><h3>${lang.prompt.focus}</h3>`],\n    choices: [lang.prompt.continue.button],\n    on_load: () => (eventMarkerMessage()\n                      .then(s => document.getElementById('usb-alert')\n                      .innerHTML = s )\n                    )\n  }\n}\n\nexport default holdUpMarker\n","import experimentStart from '../trials/experimentStart'\nimport startCode from '../trials/startCode'\nimport userId from '../trials/userId'\nimport holdUpMarker from '../trials/holdUpMarker'\nimport { AT_HOME } from '../config/main'\n\nconsole.log('at_home', AT_HOME)\nconsole.log('env at home', process.env.REACT_APP_AT_HOME)\nconst preamble = {\n  type: 'html_keyboard_response',\n  stimulus: '',\n  timeline: (AT_HOME) ?\n    [experimentStart(), userId()] :\n    [experimentStart(), userId(), holdUpMarker(), startCode()]\n}\n\nexport default preamble\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst experimentEnd = (duration) => {\n  let stimulus = baseStimulus(`<h1>${lang.task.end}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: duration\n  }\n}\n\nexport default experimentEnd\n","import { eventCodes } from '../config/main'\nimport { jitter50 } from '../lib/utils'\nimport { pdSpotEncode, photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { fixationHTML } from '../lib/markup/fixation'\nimport { jsPsych } from 'jspsych-react'\n\nconst fixation = (duration) => {\n  let stimulus = fixationHTML + photodiodeGhostBox()\n\n  const code = eventCodes.fixation;\n\n  return {\n    type: 'html_keyboard_response',\n    choices: jsPsych.NO_KEYS,\n    stimulus: stimulus,\n    response_ends_trial: false,\n    trial_duration: jitter50(duration),\n    on_load: () => pdSpotEncode(code),\n    on_finish: (data) => data.code = code\n  }\n}\n\nexport default fixation\n","export const fixationHTML = '<div class=\"beads_container\"><div id=\"fixation-dot\"> </div></div>'\n","import { eventCodes } from '../config/main'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\n\nconst showCondition = (condition, duration, timeBeforeUpdate) => {\n  const code = eventCodes.evidence\n\n  return {\n    type: 'html_keyboard_response',\n    stimulus: '',\n    response_ends_trial: false,\n    trial_duration: duration,\n    on_start: (trial) => {\n      trial.stimulus = baseStimulus(condition)\n                      + photodiodeGhostBox()\n    },\n    on_load: () => pdSpotEncode(code),\n    on_finish: (data) => data.code = code\n  }\n}\n\nexport default showCondition\n","import { formatDollars } from '../utils'\n\nconst earningsDisplay = (earnings) => {\n  const bclass = (earnings >= 0) ? 'success' : 'danger'\n  return (\n    `<div class='beads_container'>\n    <h1 class='text-${bclass}'>${formatDollars(earnings)}</h1>\n    </div>`\n  )\n}\n\nexport {\n  earningsDisplay\n}\n","import { eventCodes, MTURK } from '../config/main'\nimport { earningsDisplay } from '../lib/markup/earnings'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\n\nconst beadEnd = (trialDetails, duration) => {\n    const code = eventCodes.show_earnings\n\n    return {\n      type: 'html_keyboard_response',\n      stimulus: '',\n      response_ends_trial: false,\n      trial_duration: duration,\n      on_load: () => pdSpotEncode(code),\n      on_start: (trial) => {\n        let earnings = Math.random()\n        trial.stimulus = earningsDisplay(earnings)\n        if (!MTURK) trial.stimulus += photodiodeGhostBox()\n      },\n      on_finish: (data) => data.code = code\n    }\n}\n\nexport default beadEnd\n","// import trials\nimport fixation from '../trials/fixation'\nimport showCondition from '../trials/showCondition'\nimport taskEnd from '../trials/taskEnd'\n\n\nconst taskTrial = (blockSettings, blockDetails, condition) => {\n  // initialize trial details\n  let trialDetails = {\n    condition: condition,\n    trial_earnings: 0,\n    start_time: Date.now()\n  }\n\n  // timeline\n  let timeline = [\n    // show condition\n    showCondition(condition, 1000, 500),\n    fixation(650),\n    // end the trial\n    taskEnd(trialDetails, 500)\n  ]\n\n    return {\n  \t\ttype: 'html_keyboard_response',\n  \t\ttimeline: timeline\n  \t}\n}\n\nexport default taskTrial\n","import taskTrial from './taskTrial'\nimport { generateStartingOpts } from '../lib/taskUtils'\n\nconst taskBlock = (blockSettings) => {\n  // initialize block\n\tconst startingOpts = generateStartingOpts(blockSettings)\n\n  const blockDetails = {\n\t  block_earnings: 0.0,\n\t\toptimal_earnings: 0.0,\n\t\tcontinue_block: true\n\t}\n\n\t// timeline = loop through trials\n\tlet timeline = startingOpts.map( (condition) => taskTrial(blockSettings, blockDetails, condition))\n\n\tlet blockStart = {\n\t\ttype: 'html_keyboard_response',\n\t\tstimulus: '',\n\t\ttrial_duration: 1,\n\t\ton_finish: (data) => data.block_settings = blockSettings\n\t}\n\n\ttimeline.unshift(blockStart)\n\n  return {\n\t\ttype: 'html_keyboard_response',\n\t\ttimeline: timeline\n\t}\n}\n\nexport default taskBlock\n","// utilities specific to this app/task\n\nimport _ from 'lodash'\n\n// initialize starting conditions for each trial within a block\nconst generateStartingOpts = (blockSettings) => {\n\tlet startingOptions = blockSettings.conditions.map( (c) => {\n\t\t// Repeat each starting condition the same number of times\n\t\treturn _.range(blockSettings.repeats_per_condition).map( () => c )\n\t})\n\n\treturn _.shuffle(_.flatten(startingOptions))\n}\n\n\nexport {\n\tgenerateStartingOpts\n}\n","import { defaultBlockSettings } from './main';\nimport { deepCopy } from '../lib/utils'\n\n// PRACTICE BLOCK SETTINGS\n\n// create copy of default settings\nlet practiceBlock = deepCopy(defaultBlockSettings)\n\npracticeBlock.conditions = [\"m\", \"n\"]\npracticeBlock.repeats_per_condition = 1\n\npracticeBlock.is_practice = true\n\n// export the settings\nexport {\n\tpracticeBlock\n}\n","import { defaultBlockSettings } from './main';\nimport { deepCopy } from '../lib/utils'\n\n// TUTORIAL SETTINGS\n\n// create copy of default settings\nlet tutorialBlock = deepCopy(defaultBlockSettings)\n\n// update default settings for tutorial\ntutorialBlock.is_tutorial = true\ntutorialBlock.photodiode_active = false\n\n// export the settings\nexport {\n\ttutorialBlock\n}\n","import { defaultBlockSettings } from './main';\nimport { deepCopy } from '../lib/utils'\n\n// FIRST EXPERIMENT BLOCK SETTINGS\n\n// create copy of default settings\nlet exptBlock1 = deepCopy(defaultBlockSettings)\n\nexptBlock1.repeats_per_condition = 2\n\n// SECOND EXPERIMENT BLOCK SETTINGS\n\n// create copy of default settings\nlet exptBlock2 = deepCopy(defaultBlockSettings)\n\nexptBlock2.conditions = [\"e\", \"f\"]\nexptBlock2.repeats_per_condition = 2\n\nexport {\n  exptBlock1,\n  exptBlock2,\n}\n","import buildCountdown from '../trials/countdown'\nimport preamble from './preamble'\nimport experimentEnd from '../trials/experimentEnd'\nimport taskBlock from './taskBlock'\nimport userId from '../trials/userId'\n\nimport { MTURK, lang } from '../config/main'\nimport { practiceBlock } from '../config/practice'\nimport { tutorialBlock } from '../config/tutorial'\nimport { exptBlock1, exptBlock2 } from '../config/experiment'\n\nimport startCode from '../trials/startCode'\n\n\nconst primaryTimeline = [\n        preamble,\n        buildCountdown(lang.countdown.message1, 3),\n        taskBlock(practiceBlock),\n        buildCountdown(lang.countdown.message2, 3),\n        taskBlock(exptBlock1),\n        experimentEnd(5000)\n        ]\n\nconst mturkTimeline = [\n        preamble,\n        buildCountdown(lang.countdown.message1, 3),\n        taskBlock(tutorialBlock),\n        buildCountdown(lang.countdown.message2, 3),\n        taskBlock(exptBlock2),\n        experimentEnd(3000)\n        ]\n\nexport const tl = (MTURK) ? mturkTimeline : primaryTimeline\n","import React from 'react'\nimport { Experiment, jsPsych } from 'jspsych-react'\nimport { tl } from './timelines/main'\nimport { MTURK, EXPFACTORY } from './config/main'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport '@fortawesome/fontawesome-free/css/all.css'\nimport { getTurkUniqueId, sleep } from './lib/utils'\n\nconst isElectron = !MTURK\nlet ipcRenderer = false;\nlet psiturk = false\n\nif (isElectron) {\n  const electron = window.require('electron');\n  ipcRenderer  = electron.ipcRenderer;\n} else if (EXPFACTORY) {\n  /* eslint-disable */\n  window.lodash = _.noConflict()\n  psiturk = new PsiTurk(getTurkUniqueId(), '/finish')\n  /* eslint-enable */\n} else {\n  /* eslint-disable */\n  window.lodash = _.noConflict()\n  psiturk = new PsiTurk(getTurkUniqueId(), '/complete')\n  /* eslint-enable */\n}\n\nclass App extends React.Component {\n  render() {\n    console.log(\"Outside Turk:\", jsPsych.turk.turkInfo().outsideTurk)\n    console.log(\"Turk:\", MTURK)\n    console.log(\"Expfactory:\", EXPFACTORY)\n\n    return (\n      <div className=\"App\">\n        <Experiment settings={{\n          timeline: tl,\n          on_data_update: (data) => {\n            if ( ipcRenderer ) {\n              ipcRenderer.send('data', data)\n            }\n            else if (psiturk) {\n                psiturk.recordTrialData(data)\n            }\n          },\n          on_finish: (data) => {\n            if ( ipcRenderer ) {\n              ipcRenderer.send('end', 'true')\n            }\n            else if (EXPFACTORY) {\n              const completeExpfactory = async () => {\n                psiturk.saveData()\n                await sleep(5000)\n                console.log(psiturk.taskdata);\n                data = {\"data\": psiturk.taskdata};\n                fetch(\"/save\", {\n                    method: \"POST\", \n                    body: JSON.stringify(data)\n                }).then(res => {\n                   console.log(\"Request complete! response:\", res);\n                   psiturk.teardownTask();\n                   window.location = psiturk.taskdata.adServerLoc + \"/next\";\n                });\n              }\n              completeExpfactory()\n            }\n            else if (psiturk) {\n              const completePsiturk = async () => {\n                psiturk.saveData()\n                await sleep(5000)\n                psiturk.completeHIT()\n              }\n              completePsiturk()\n            }\n          },\n        }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}